[Git]
- 버전관리 도구!
- 커밋할 때마다 이전과 현재파일의 차이점을 자동 비교해 줌!

[버전관리의 좋은점]
- 내가 무슨 작업, 수정을 해왔는지를 한 눈에 볼 수 있음 (자체로 히스토리)
- 작업 단위를 나눠서 비교분석 및 오류 전으로 되돌아가기 가능
- 하나의 프로젝트로 협업시 유용 (누가 어디를 작업했는지, 다른 사람 작업내용 덮어쓰기 예방)

[Github] 
- Git 프로젝트의 저장소 (원격 repo)
- 개발 기능 관리 (해야하는 것, 끝낸 것 등 체크)
- 개발자 커뮤니티

[sourctree]
- Git 사용을 쉽게 해주는 툴 중 하나

[Commit]
- 프로젝트 중간 중간 현재 상태를 스냅샷찍는 것!
- 파일의 내용 / 언제 / 누가 / 고유 커밋 ID 등이 남음
- 커밋을 하면 이전버전과 현재버전의 차이가 자동으로 분석됨

[add / staging]
- 커밋에 반영할 파일을 선택하는 것 (골라서 커밋할 수 잇음)

[Git 초기화]
- 컴퓨터의 프로젝트를 Git이 관리하는 프로젝트로 만드는 것

[repository]
- Git에서 관리되는 프로젝트

[원격 repo / 로컬 repo]
- 원격 repo : 다른사람에게 공개되는 공간에 저장된 리포지토리
- 로컬 repo : 내 컴퓨터에 저장된 리포지토리
- 클라우드 서비스와 다르게 원격 repo는 커밋(작업내역)을 자동반영하지 않음 (수동)

[원격 repo를 사용하는 이유]
- 협업의 용이성 때문
- 하나의 원격 repo에 여러 로컬 repo를 연결해 하나의 프로젝트를 동시작업하는 것이 가능해짐

[Pull]
- 원격 repo의 내용을 로컬 repo에 반영하는 것

[Push]
- 로컬 repo의 내용을 원격 repo에 반영하는 것

[클론]
- 로컬 repo에 아무내용이 없을 때 원격 repo에서 작업을 가져오는 초기 다운로드

[tracking]
- 원격 repo와 로컬 repo가 모두 있고 두개를 연결하고 싶을 때 로컬 repo가 원격 repo를 트래킹하도록 설정